<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on just another dev&#39;s notes</title>
    <link>http://rag0n.github.io/blog/</link>
    <description>Recent content in Blog on just another dev&#39;s notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2015 Alexander Guschin</copyright>
    <lastBuildDate>Wed, 23 Dec 2015 11:30:57 +0300</lastBuildDate>
    
	<atom:link href="http://rag0n.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Swift Design Patterns: Facade</title>
      <link>http://rag0n.github.io/blog/swift-design-patterns-facade/</link>
      <pubDate>Wed, 23 Dec 2015 11:30:57 +0300</pubDate>
      
      <guid>http://rag0n.github.io/blog/swift-design-patterns-facade/</guid>
      <description>Зачем нужен? Паттерн Facade применяется, когда какой-то части клиента требуется упрощенный интерфейс, управляющий полной функциональностью сложной подсистемы.
Определение  предоставляет унифицированный интерфейс к группе интерфейсов подсистемы. Фасад определяет высокоуровневый интерфейс, упрощающий работу с подсистемой обертывает(упаковывает) сложную подсистему в простой интерфейс  Реализация Паттерн инкапсулирует сложную подсистему внутри одного простого интерфейса. Упрощает начальное использование подсистемы(при этом остается гибкость, если нужна сложная настройка), уменьшает связанность. К реализации нужно подходить осторожно - фасад легко превратить в god-объект, который управляет всем и вся.</description>
    </item>
    
    <item>
      <title>Swift Design Patterns: Adapter</title>
      <link>http://rag0n.github.io/blog/swift-design-patterns-adapter/</link>
      <pubDate>Mon, 21 Dec 2015 11:23:10 +0300</pubDate>
      
      <guid>http://rag0n.github.io/blog/swift-design-patterns-adapter/</guid>
      <description>Зачем нужен? Паттерн Adapter применяется, когда у вас имеется готовый компонент, реализующий требуемую функциональность, но его API несовместимо с философией/архитектурой остальной системы.
Определение  преобразует интерфейс класса к другому интерфейсу, на который рассчитан клиент. Адаптер обеспечивает совместную работу классов, невозможную в обычных условиях из-за несовместимости интерфейсов. обертывает(упаковывает) существующий класс в новый интерфейс приводит в соответствие старый компонент к новой системе  Реализация Переиспользование кода очень часто является болезненным и труднодостижимым процессом.</description>
    </item>
    
    <item>
      <title>Swift Design Patterns: Singleton</title>
      <link>http://rag0n.github.io/blog/swift-design-patterns-singleton/</link>
      <pubDate>Fri, 18 Dec 2015 14:04:01 +0300</pubDate>
      
      <guid>http://rag0n.github.io/blog/swift-design-patterns-singleton/</guid>
      <description>Зачем нужен? Паттерн Singleton применяется, если в приложении должен использоваться один и только один экземпляр класса. Кроме того, желательно иметь ленивую инициализацию и глобальный доступ.
Определение  гарантирует, что класс имеет только один экземпляр, и предоставляет глобальную точку доступа к этому экземпляру  Реализация  Объявите статичный аттрибут-константу в классе Используйте приватный метод доступа у инициализатора  Пример Реализация на языке Swift получается в одну строчку. Связано это с тем, что для глобальных и статичных переменных структур, перечислений и классов используется ленивая инициализация.</description>
    </item>
    
    <item>
      <title>Swift Design Patterns: Command</title>
      <link>http://rag0n.github.io/blog/swift-design-patterns-command/</link>
      <pubDate>Fri, 18 Dec 2015 14:00:39 +0300</pubDate>
      
      <guid>http://rag0n.github.io/blog/swift-design-patterns-command/</guid>
      <description>Зачем нужен? Паттерн Command применяется, когда необходимо выполнять команды(операции, запросы), без знания того, какие функции должны вызываться и даже того, кто должен выполнять эти функции. Паттерн инкапсулирует вычислительные блоки(получателя + набор операций). Его можно применять в планировщиках, различных пулах, очередях задач.
Обеспечивает соблюдение принципа инверсии зависимостей. Уменьшает связанность классов.
Определение  инкапсулирует запрос в виде объекта, делая возможной параметризацию клиентских объектов с различными запросами, организацию очереди или регистрацию запросов, а также поддержку отмены операций  Реализация Command разъединяет(decouple) объект, который вызывает операцию от объекта, который знает как эту операцию выполнить.</description>
    </item>
    
    <item>
      <title>Swift Design Patterns: Abstract Factory</title>
      <link>http://rag0n.github.io/blog/swift-design-patterns-abstract-factory/</link>
      <pubDate>Thu, 17 Dec 2015 10:18:13 +0300</pubDate>
      
      <guid>http://rag0n.github.io/blog/swift-design-patterns-abstract-factory/</guid>
      <description>Зачем нужен? Паттерн Abstract factory применяется для инкапсуляции зависимостей(операционная система, базы данных и тд). Клиент используют интерфейс, предоставляемый фабрикой, а конкретная реализация(конкретная фабрика) определяется на этапе исполнения.
Обеспечивает соблюдение принципа инверсии зависимостей. Уменьшает связанность классов.
Определение  предоставляет интерфейс создания семейства взаимосвязанных или взаимозависимых объектов без указания их конкретных классов  Реализация Объект фабрики берет на себя ответственность за создание сервисов для всего семейства продуктов. Клиенты не создают объекты напрямую, а делегируют создание фабрике.</description>
    </item>
    
    <item>
      <title>Swift Design Patterns: Factory Method</title>
      <link>http://rag0n.github.io/blog/swift-design-patterns-factory-method/</link>
      <pubDate>Wed, 16 Dec 2015 17:15:56 +0300</pubDate>
      
      <guid>http://rag0n.github.io/blog/swift-design-patterns-factory-method/</guid>
      <description>Зачем нужен? Паттерн Factory method применяется когда создатель(фреймворк) должен стандартизировать архитектурную модель для клиентов и одновременно позволить клиентам определять свои объекты предметной области(domain objets).
Обеспечивает соблюдение принципа инверсии зависимостей. Уменьшает связанность классов.
Определение  определяет интерфейс создания объекта, но позволяет субклассам выбрать класс создаваемого экземпляра. Таким образом, Фабричный метод делегирует операцию создания экземпляра субклассам.  Реализация Суперкласс определяет стандартное поведение и делегирует детали создания субклассам, определенным пользователем. Для создания объектов используется наследование.</description>
    </item>
    
    <item>
      <title>Swift Design Patterns: Decorator</title>
      <link>http://rag0n.github.io/blog/swift-design-patterns-decorator/</link>
      <pubDate>Tue, 15 Dec 2015 12:31:52 +0300</pubDate>
      
      <guid>http://rag0n.github.io/blog/swift-design-patterns-decorator/</guid>
      <description>Зачем нужен? Паттерн Decorator применяется для динамического добавления поведения или состояния объектам. Наследования не является допустимой альтернативой, т.к оно статично(этап компиляции) и применяется ко всему классу.
Соответствует open/closed принципу SOLID: класс открыт для расширения, но закрыт для изменения
Определение  динамически наделяет объект новыми возможностями и является гибкой альтернативой наследованию в области расширения функциональности декорирование базового объекта путем рекурсивного завертывания(wrapping) дополнений, определяемых пользователем  Реализация  Определите общий интерфейс(таким образом классы будут взаимозаменяемы) Создайте класс основного компонента(наследует общий интерфейс) Создайте базовый класс декоратора(наследует общий интерфейс) У декоратора с помощью композиции объявите переменную типа общего интерфейса Инициализируйте этот объект в инициализаторе декоратора У декоратора делегируйте методы общего интерфейса этому объекту Создайте конкретные классы декоратора для каждого дополнения Конкретные классы декоратора делегируют поведение базовому классу декоратора + добавляют свое Клиент конфигурирует тип и порядок базового и дополнительных компонентов  Пример Допустим мы владеем кафе и у нас в продаже имеются различные виды кофе:</description>
    </item>
    
    <item>
      <title>Swift Design Patterns: Observer</title>
      <link>http://rag0n.github.io/blog/swift-design-patterns-observer/</link>
      <pubDate>Fri, 04 Dec 2015 13:07:09 +0300</pubDate>
      
      <guid>http://rag0n.github.io/blog/swift-design-patterns-observer/</guid>
      <description>Зачем нужен? Паттерн Observer часто применяется для определения бизнес-логики(data model) в субъекте и делегирования view функций различным несвязанным наблюдателям. Т.е применяется во &amp;ldquo;View&amp;rdquo; части паттерна MVC.
Существует две реализации:
 pull(получение) изменений наблюдателем через геттер-методы pushing - активная доставка от субьекта  Соответствует Dependency Inversion принципу SOLID: субьект зависит не от наблюдателей, а от интерфейса Observer. Т.о наблюдателями могут быть любые объекты, реализующие данный интерфейс. В результате получаем слабую связанность(low coupling) между объектами.</description>
    </item>
    
    <item>
      <title>Swift Design Patterns: Strategy</title>
      <link>http://rag0n.github.io/blog/swift-design-patterns-strategy/</link>
      <pubDate>Tue, 01 Dec 2015 17:54:00 +0300</pubDate>
      
      <guid>http://rag0n.github.io/blog/swift-design-patterns-strategy/</guid>
      <description>Зачем нужен? Паттерн Strategy применяется для уменьшения связанности. В двух словах: программируйте на уровне интерфейсов, а не реализаций.
Соответствует open/closed принципу SOLID: изменение конкретных классов не влияет на клиента, т.к он зависит только от интерфейса.
Определение  определяет семейство алгоритмов(поведений), инкапсулирует и обеспечивает их взаимозаменяемость. Позволяет модифицировать алгоритмы независимо от их использования на стороне клиента. инкапсулируем абстракцию в интерфейсе, скрываем реализацию в конкретных классах  Реализация  Найдите алгоритм(поведение) Определите сигнатуру в супертипе(интерфейсе/абстрактном классе/протоколе) Скройте реализацию(или реализации) в конкретном классе, который соответствует этому интерфейсу Свяжите клиента алгоритма с интерфейсом  Пример Допустим у нас есть утки.</description>
    </item>
    
    <item>
      <title>Лучшие практики swift (часть 1)</title>
      <link>http://rag0n.github.io/blog/%D0%BB%D1%83%D1%87%D1%88%D0%B8%D0%B5-%D0%BF%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B8-swift-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1/</link>
      <pubDate>Wed, 28 Oct 2015 09:34:02 +0300</pubDate>
      
      <guid>http://rag0n.github.io/blog/%D0%BB%D1%83%D1%87%D1%88%D0%B8%D0%B5-%D0%BF%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B8-swift-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1/</guid>
      <description>Я начал изучать swift сразу же после анонса. За первые пару дней я прочитал The Swift Programming Language(Apple). Я писал небольшие приложения и одновременно игрался с новым языком, но никогда не чувствовал, что язык достаточно взрослый для больших проектов.
Но это было до анонса swift 2.0. После анонса я стал использовать swift все больше и больше и наконец недавно начал писать большой проект для The App Business используя swift.</description>
    </item>
    
    <item>
      <title>Как программно добавить Autolayout constraints</title>
      <link>http://rag0n.github.io/blog/%D0%BA%D0%B0%D0%BA-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE-%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-autolayout-constraints/</link>
      <pubDate>Sat, 24 Oct 2015 12:42:12 +0300</pubDate>
      
      <guid>http://rag0n.github.io/blog/%D0%BA%D0%B0%D0%BA-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE-%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-autolayout-constraints/</guid>
      <description>Используя классический способ override func viewDidLoad() { super.viewDidLoad() let newView = UIView() newView.backgroundColor = UIColor.redColor() newView.translatesAutoresizingMaskIntoConstraints = false view.addSubview(newView) let horizontalConstraint = NSLayoutConstraint(item: newView, attribute: NSLayoutAttribute.CenterX, relatedBy: NSLayoutRelation.Equal, toItem: view, attribute: NSLayoutAttribute.CenterX, multiplier: 1, constant: 0) view.addConstraint(horizontalConstraint) let verticalConstraint = NSLayoutConstraint(item: newView, attribute: NSLayoutAttribute.CenterY, relatedBy: NSLayoutRelation.Equal, toItem: view, attribute: NSLayoutAttribute.CenterY, multiplier: 1, constant: 0) view.addConstraint(verticalConstraint) let widthConstraint = NSLayoutConstraint(item: newView, attribute: NSLayoutAttribute.Width, relatedBy: NSLayoutRelation.Equal, toItem: nil, attribute: NSLayoutAttribute.NotAnAttribute, multiplier: 1, constant: 100) newView.</description>
    </item>
    
  </channel>
</rss>