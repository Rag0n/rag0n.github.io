<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Developer&#39;s adventures</title>
    <link>http://rag0n.github.io/post/</link>
    <description>Recent content in Posts on Developer&#39;s adventures</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <managingEditor>alexander.ragon@gmail.com (Alexander Guschin)</managingEditor>
    <webMaster>alexander.ragon@gmail.com (Alexander Guschin)</webMaster>
    <copyright>(c) 2015 Rag0n</copyright>
    <lastBuildDate>Wed, 28 Oct 2015 09:34:02 +0300</lastBuildDate>
    <atom:link href="http://rag0n.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Лучшие практики swift (часть 1)</title>
      <link>http://rag0n.github.io/2015/10/28/%D0%BB%D1%83%D1%87%D1%88%D0%B8%D0%B5-%D0%BF%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B8-swift-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1/</link>
      <pubDate>Wed, 28 Oct 2015 09:34:02 +0300</pubDate>
      <author>alexander.ragon@gmail.com (Alexander Guschin)</author>
      <guid>http://rag0n.github.io/2015/10/28/%D0%BB%D1%83%D1%87%D1%88%D0%B8%D0%B5-%D0%BF%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B8-swift-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1/</guid>
      <description>

&lt;p&gt;Я начал изучать swift сразу же после анонса. За первые пару дней я прочитал The Swift Programming Language(Apple). Я писал небольшие приложения и одновременно игрался с новым языком, но никогда не чувствовал, что язык достаточно взрослый для больших проектов.&lt;/p&gt;

&lt;p&gt;Но это было до анонса swift 2.0. После анонса я стал использовать swift все больше и больше и наконец недавно начал писать большой проект для &lt;a href=&#34;http://www.theappbusiness.com/&#34;&gt;The App Business&lt;/a&gt; используя swift.&lt;/p&gt;

&lt;p&gt;Я решил поделиться своими наблюдениями - некоторые из них очевидны и общеприняты, но, надеюсь, некоторые будут новыми для большинства читателей.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;предпочитайте-let-вместо-var&#34;&gt;Предпочитайте &lt;code&gt;let&lt;/code&gt; вместо &lt;code&gt;var&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Тренируйте свой мозг и рефлексы по умолчанию использовать let. Вы можете объявить переменную как var наперед, но я рекомендую использовать var только если вам обязательно надо изменить значение переменной. Это самый очевидный пункт из моих лучших практик, но это очень важно и стоит упоминания.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Примечание от переводчика:&lt;/em&gt;&lt;/strong&gt; в xCode 7 компилятор автоматически анализирует, меняете ли вы значение у переменной, объявленной как &lt;code&gt;var&lt;/code&gt; и предлагает изменить ее на &lt;code&gt;let&lt;/code&gt; в противном случае.&lt;/p&gt;

&lt;h2 id=&#34;предпочитайте-приватный-private-контроль-доступа&#34;&gt;Предпочитайте приватный(&lt;code&gt;private&lt;/code&gt;) контроль доступа&lt;/h2&gt;

&lt;p&gt;Опять очевидный пункт, но он также стоит упоминания. Всегда лучше скрывать как можно больше реализации(что означает доступ только из того же исходного файла).&lt;/p&gt;

&lt;h2 id=&#34;предпочитайте-не-опциональные-типы&#34;&gt;Предпочитайте не опциональные типы&lt;/h2&gt;

&lt;p&gt;Опциональные типы потрясающие. Этот концепт существует и в других языках(Scala, Haskell, и др).&lt;/p&gt;

&lt;p&gt;Но несмотря на то, какими полезными они могут быть, я все же пытаюсь избегать их, если это возможно. Это приводит к более чистому коду, если вы знаете, что переменная или атрибут содержат значение, или что функция возвращает действительное(не nil) значение.&lt;/p&gt;

&lt;p&gt;Например, я предпочитаю вызывать исключения в случаях, когда  функция не может вернуть действительное(не nil) значение. Посмотрите на &lt;code&gt;NSJSONSerialization.JSONObjectWithData&lt;/code&gt;. Эта функция гарантирует, что она возвращает значение, иначе она вызывает исключение.&lt;/p&gt;

&lt;h2 id=&#34;предпочитайте-guard-let-вместо-if-let&#34;&gt;Предпочитайте &lt;code&gt;guard let&lt;/code&gt; вместо &lt;code&gt;if let&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Что вы можете сделать в &lt;code&gt;if let&lt;/code&gt; блоке? Я почти всегда использую &lt;code&gt;guard let&lt;/code&gt; и ранний возврат из функции, если что-то идет не так. Ранний возврат способствует более легкому чтению кода, т.к вы можете гарантировать корректное состояние переменных. Если вы не можете вычислить обязательное значение, используйте ранний возврат(return).&lt;/p&gt;

&lt;h2 id=&#34;не-бойтесь-вызывать-исключения&#34;&gt;Не бойтесь вызывать исключения&lt;/h2&gt;

&lt;p&gt;Вместо раннего возврата, вы можете вызвать исключение, как альтернативную точку выхода из функции. Обработка исключений в Objective-C (&lt;code&gt;@try @catch&lt;/code&gt;) всегда была доступна, хотя использовать эту возможность было не принято. В Swift обработка исключений является фундаментальной идеей и вы должны использовать это.&lt;/p&gt;

&lt;p&gt;Например, у меня была функция парсинга, которая возвращала опциональный тип, если данные не могли быть синтаксически разобраны. Это означает, что вызывающая программа должна была проверять возвращаемое значение на &lt;code&gt;nil&lt;/code&gt;. Я отрефакторил эту функцию так, чтобы она всегда возвращала действительное значение и вызывала исключение в противном случае.&lt;/p&gt;

&lt;h2 id=&#34;не-используйте-guard-для-многочисленных-проверок&#34;&gt;Не используйте &lt;code&gt;guard&lt;/code&gt; для многочисленных проверок&lt;/h2&gt;

&lt;p&gt;Рассмотрим код:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;guard let data = data,
          son = self.jsonFromData(data),
          authors = json[&amp;quot;authors&amp;quot;] else {
  throw AuthorParserError
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В нем избегаются повторные вызовы исключения &lt;code&gt;AuthorParserError&lt;/code&gt;, но по моему мнению было бы намного лучше написать так:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;guard let data = data else {
  throw AuthorParserError
}
guard let son = self.jsonFromData(data) else {
  throw AuthorParserError
}
guard let authors = json[&amp;quot;authors&amp;quot;] else {
  throw AuthorParserError
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В данном варианте можно протестировать каждый случай по отдельности и вы можете быть уверены, что вы проверили все случаи, иначе Xcode покажет ошибку на неразвернутых опциональных типах.&lt;/p&gt;

&lt;h2 id=&#34;всегда-вносите-зависимости-даже-если-они-предназначены-только-для-тестирования&#34;&gt;Всегда вносите зависимости, даже если они предназначены только для тестирования&lt;/h2&gt;

&lt;p&gt;В swift есть удобная возможность - необязательные аргументы функций. С одной стороны вы можете указывать как использовать функцию по умолчанию, с другой - облегчить тестирование классов,  в частности зависимости мок-объектов.&lt;/p&gt;

&lt;p&gt;Например, если ваш класс рассчитывает, что кто-либо будет обрабатывать сетевые запросы, то почему бы не передать мок-объект в инициализатор класса?&lt;/p&gt;

&lt;p&gt;Это облегчит тестирование, т.к вы можете создать мок-объект для зависимостей и протестировать функциональность одного конкретного класса(Конечно, вы также можете написать более интегрированные тесты).&lt;/p&gt;

&lt;p&gt;Например:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;public init(requestDelegate: MyClassRequestDelegate = RequestManager()) {
  self.requestDelegate = requestDelegate
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В коде выше зависимость - это на самом деле протокол, который облегчает тестирование, т.к нам достаточно создать мок-объект, который удовлетворяет этому протоколу.&lt;/p&gt;

&lt;p&gt;Некоторые программисты могут внести зависимость навсегда, вместо определения значения по умолчанию. Но мне кажется, что главная задача для этого типа зависимостей - облегчить тестирование. Если вы не пишите библиотеку, ваше приложение вероятно всегда использует одну и ту же зависимость, поэтому есть смысл определить ее как зависимость по умолчанию.&lt;/p&gt;

&lt;h2 id=&#34;всегда-используйте-псевдонимы-типа-typealias-для-завершающих-обработчиков-если-это-возможно&#34;&gt;Всегда используйте псевдонимы типа(&lt;code&gt;typealias&lt;/code&gt;) для завершающих обработчиков(если это возможно)&lt;/h2&gt;

&lt;p&gt;Несмотря на то, что синтаксис замыканий может быть &lt;a href=&#34;http://fuckingclosuresyntax.com/&#34;&gt;запутывающим&lt;/a&gt;,  синтаксис для псевдонима замыкания очевидно проще, чем эквивалентный &lt;code&gt;typedef&lt;/code&gt; в Objective-C. Поэтому всегда объявляйте псевдоним для завершающих обработчиков(конечно если они не содержат обобщенных типов).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;typealias SomethingCompletion = (result: SomeType) -&amp;gt; Void
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;используйте-перечисления-enum-для-уменьшения-неопределенности&#34;&gt;Используйте перечисления(&lt;code&gt;enum&lt;/code&gt;) для уменьшения неопределенности&lt;/h2&gt;

&lt;p&gt;В этом фрагменте кода я передаю завершающему обработчику кортеж, который повышает неопределенность.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;doSomething() { (output: NSData?, error: NSError?) in
  // need to check if we have output or error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Заметьте, что я использую &lt;code&gt;NSError&lt;/code&gt; вместо вызова исключения, т.к невозможно вызывать исключения асинхронно.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Кортеж принимает 2 опциональных значения, что также противоречит тому, о чем о писал выше(используйте не опциональные типы).&lt;/p&gt;

&lt;p&gt;Что будет, если мы не передадим ни &lt;code&gt;output&lt;/code&gt;, ни &lt;code&gt;error&lt;/code&gt;? Что если мы передадим значения вовсе?&lt;/p&gt;

&lt;p&gt;Вы должны явно передавать аргументы в обработчик и в этом вам могут помочь перечисления. Например, вы могли бы определить перечисление &lt;code&gt;Result&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;enum Result&amp;lt;U&amp;gt; {
  case .Success(output: U)
  case .Failure(error: NSError)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь можно переписать обработчик ошибок так:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;doSomething() { result in
  switch (result) {
  case .Success(let output):
    // use output
  case .Failure(let error):
    // handle error
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь стало абсолютно ясно, что если вызов функции был успешен, мы получим действительный результат(и мы даже будем знать его тип). И наоборот, если вызов неуспешен мы получим ошибку. Результат может быть либо успешным, либо не успешным. Без неопределенности.&lt;/p&gt;

&lt;h2 id=&#34;трюк-для-обобщенного-завершающего-обработчика&#34;&gt;Трюк для обобщенного завершающего обработчика&lt;/h2&gt;

&lt;p&gt;Предположим у вас есть функция, объявленная в протоколе:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;protocol ServiceProvider {
  func provideService&amp;lt;U where U: AnyService&amp;gt;(completion: (output: U) -&amp;gt; Void)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;При объявлении класса,
Если при объявлении класса, соответствующего протоколу(т.е реализация методов протокола) вы знаете как создать экземпляр объекта типа &lt;code&gt;U whee U: AnyService&lt;/code&gt;, тогда вы можете вернуть объект соответствующего типа(&lt;code&gt;AnyService&lt;/code&gt; протокол должен предоставлять способ создания/возвращения экземпляра).&lt;/p&gt;

&lt;p&gt;В этом случае вызывающий объект определяет какой объект должен быть возвращен в замыкании.&lt;/p&gt;

&lt;p&gt;Например:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;myOtherClass.provideService { (output: RoomService) in
  // do something with the RoomService
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Реализация &lt;code&gt;provideService&lt;/code&gt; ничего не знает о классе &lt;code&gt;RoomService&lt;/code&gt;. Этот класс просто удовлетворяет протоколу &lt;code&gt;AnyService&lt;/code&gt; благодаря чему можно создать его экземпляры в замыкании.&lt;/p&gt;

&lt;p&gt;Мне особенно нравится идея, что вызывающий может получить обратно именно тот объект, который он хочет. Вызывающий объект просто говорит: &amp;laquo;В завершающем обработчике я хочу получить экземпляр &lt;code&gt;RoomService&lt;/code&gt; и реализованная функция знает, как это сделать&amp;raquo;.&lt;/p&gt;

&lt;p&gt;Это полная противоположность блокам в &lt;code&gt;Objective C&lt;/code&gt;, где мы должны были бы объявить аргумент завершающего обработчика с типом &lt;code&gt;id&lt;/code&gt; и вызывающий объект сказал бы компилятору какой тип объекта он ожидает получить назад при реализации завершающего обработчика.&lt;/p&gt;

&lt;h2 id=&#34;лучшие-практики-замыканий&#34;&gt;Лучшие практики замыканий&lt;/h2&gt;

&lt;p&gt;Я пытаюсь сохранять замыкания как можно более краткими и лаконичными.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Если замыкание возвращает &lt;code&gt;Void&lt;/code&gt;, не пишите возращаемое значение&lt;/li&gt;
&lt;li&gt;Если тип объекта может быть выведен компилятором, не указывайте его тип&lt;/li&gt;
&lt;li&gt;Если замыкание имеет только один аргумент, не помещайте его в скобки&lt;/li&gt;
&lt;li&gt;Всегда передавайте замыкание как последний аргумент&lt;/li&gt;
&lt;li&gt;Всегда используйте trail(хвостовой) синтакс для замыкания, передающихся как последний аргумент&lt;/li&gt;
&lt;li&gt;Не используйте скобки, если компилятор того не требует(например, если функция имеет один аргумент и этот аргумент - замыкание)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Все эти утверждения спорные, но сейчас я имеено так использую замыкания. Например:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;myObject.doSomething { output in
  // do something with the output
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;вместо:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;myObject.doSomething() { (output: NSData?) -&amp;gt; Void in
  // do something with the output
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;p-s&#34;&gt;P.S&lt;/h4&gt;

&lt;p&gt;Я знаю, что перевод ужасен, именно поэтому я и сделал его(несмотря на то, что в статье используется простой англиский). Но невозможно улучшить какой-либо навык, ничего не делая. The growth mindset и все такое.&lt;/p&gt;

&lt;p&gt;Ссылка на &lt;a href=&#34;http://sam.dods.co/blog/2015/09/21/some-swift-best-practices/&#34;&gt;оригинал&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Как программно добавить Autolayout constraints</title>
      <link>http://rag0n.github.io/2015/10/24/%D0%BA%D0%B0%D0%BA-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE-%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-autolayout-constraints/</link>
      <pubDate>Sat, 24 Oct 2015 12:42:12 +0300</pubDate>
      <author>alexander.ragon@gmail.com (Alexander Guschin)</author>
      <guid>http://rag0n.github.io/2015/10/24/%D0%BA%D0%B0%D0%BA-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE-%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-autolayout-constraints/</guid>
      <description>

&lt;h3 id=&#34;используя-классический-способ&#34;&gt;Используя классический способ&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;override func viewDidLoad() {
    super.viewDidLoad()

    let newView = UIView()
    newView.backgroundColor = UIColor.redColor()
    newView.translatesAutoresizingMaskIntoConstraints = false
    view.addSubview(newView)

    let horizontalConstraint = NSLayoutConstraint(item: newView, attribute: NSLayoutAttribute.CenterX, relatedBy: NSLayoutRelation.Equal, toItem: view, attribute: NSLayoutAttribute.CenterX, multiplier: 1, constant: 0)
    view.addConstraint(horizontalConstraint)

    let verticalConstraint = NSLayoutConstraint(item: newView, attribute: NSLayoutAttribute.CenterY, relatedBy: NSLayoutRelation.Equal, toItem: view, attribute: NSLayoutAttribute.CenterY, multiplier: 1, constant: 0)
    view.addConstraint(verticalConstraint)

    let widthConstraint = NSLayoutConstraint(item: newView, attribute: NSLayoutAttribute.Width, relatedBy: NSLayoutRelation.Equal, toItem: nil, attribute: NSLayoutAttribute.NotAnAttribute, multiplier: 1, constant: 100)
    newView.addConstraint(widthConstraint)
    // view.addConstraint(widthConstraint) // работает аналогично

    let heightConstraint = NSLayoutConstraint(item: newView, attribute: NSLayoutAttribute.Height, relatedBy: NSLayoutRelation.Equal, toItem: nil, attribute: NSLayoutAttribute.NotAnAttribute, multiplier: 1, constant: 100)
    newView.addConstraint(heightConstraint)
    // view.addConstraint(heightConstraint) // работает аналогично
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;используя-смешанный-способ-классический-visual-format-language&#34;&gt;Используя смешанный способ(Классический + Visual Format Language)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;override func viewDidLoad() {
    super.viewDidLoad()

    let newView = UIView()
    newView.backgroundColor = UIColor.redColor()
    newView.translatesAutoresizingMaskIntoConstraints = false
    view.addSubview(newView)

    let horizontalConstraint = NSLayoutConstraint(item: newView, attribute: NSLayoutAttribute.CenterX, relatedBy: NSLayoutRelation.Equal, toItem: view, attribute: NSLayoutAttribute.CenterX, multiplier: 1, constant: 0)
    view.addConstraint(horizontalConstraint)

    let verticalConstraint = NSLayoutConstraint(item: newView, attribute: NSLayoutAttribute.CenterY, relatedBy: NSLayoutRelation.Equal, toItem: view, attribute: NSLayoutAttribute.CenterY, multiplier: 1, constant: 0)
    view.addConstraint(verticalConstraint)

    let views = [&amp;quot;newView&amp;quot;: newView]

    let widthConstraints = NSLayoutConstraint.constraintsWithVisualFormat(&amp;quot;H:[newView(100)]&amp;quot;, options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: views)
    newView.addConstraints(widthConstraints)
    // view.addConstraints(widthConstraints) // работает аналогично

    let heightConstraints = NSLayoutConstraint.constraintsWithVisualFormat(&amp;quot;V:[newView(100)]&amp;quot;, options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: views)
    newView.addConstraints(heightConstraints)
    // view.addConstraints(heightConstraints) // работает аналогично

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;используя-только-visual-format-language&#34;&gt;Используя только Visual Format Language&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;override func viewDidLoad() {
    super.viewDidLoad()

    let newView = UIView()
    newView.backgroundColor = UIColor.redColor()
    newView.translatesAutoresizingMaskIntoConstraints = false
    view.addSubview(newView)

    let views = [&amp;quot;view&amp;quot;: view, &amp;quot;newView&amp;quot;: newView]
    let horizontalConstraints = NSLayoutConstraint.constraintsWithVisualFormat(&amp;quot;H:[view]-(&amp;lt;=0)-[newView(100)]&amp;quot;, options: NSLayoutFormatOptions.AlignAllCenterY, metrics: nil, views: views)
    view.addConstraints(horizontalConstraints)
    let verticalConstraints = NSLayoutConstraint.constraintsWithVisualFormat(&amp;quot;V:[view]-(&amp;lt;=0)-[newView(100)]&amp;quot;, options: NSLayoutFormatOptions.AlignAllCenterX, metrics: nil, views: views)
    view.addConstraints(verticalConstraints)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;используя-autoresizing-mask&#34;&gt;Используя Autoresizing mask&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;override func viewDidLoad() {
    super.viewDidLoad()

    let newView = UIView(frame: CGRect(x: 0.0, y: 0.0, width: 100.0, height: 100.0))
    newView.backgroundColor = UIColor.redColor()

    newView.translatesAutoresizingMaskIntoConstraints = true

    newView.center = CGPointMake(view.bounds.midX, view.bounds.midY)
    newView.autoresizingMask = [UIViewAutoresizing.FlexibleLeftMargin, UIViewAutoresizing.FlexibleRightMargin, UIViewAutoresizing.FlexibleTopMargin, UIViewAutoresizing.FlexibleBottomMargin]

    view.addSubview(newView)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;используя-anchor-только-для-ios-9&#34;&gt;Используя Anchor(только для iOS 9)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;override func viewDidLoad() {
    super.viewDidLoad()

    let newView = UIView()
    newView.backgroundColor = UIColor.redColor()
    newView.translatesAutoresizingMaskIntoConstraints = false
    view.addSubview(newView)

    let horizontalConstraint = newView.centerXAnchor.constraintEqualToAnchor(view.centerXAnchor)
    let vertivalConstraint = newView.centerYAnchor.constraintEqualToAnchor(view.centerYAnchor)
    let widthConstraint = newView.widthAnchor.constraintEqualToAnchor(nil, constant: 100)
    let heightConstraint = newView.heightAnchor.constraintEqualToAnchor(nil, constant: 100)
    NSLayoutConstraint.activateConstraints([horizontalConstraint, vertivalConstraint, widthConstraint, heightConstraint])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;используя-snapkit-сторонее-по&#34;&gt;Используя SnapKit(сторонее ПО)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;override func viewDidLoad() {
    super.viewDidLoad()
    
    let newView = UIView()
    newView.backgroundColor = UIColor.redColor()
    view.addSubview(newView)
    
    newView.snp_makeConstraints { (make) -&amp;gt; Void in
        make.centerX.equalTo(view)
        make.centerY.equalTo(view)
        make.width.equalTo(100)
        make.height.equalTo(100)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В этом случае не требуется ни newView.translatesAutoresizingMaskIntoConstraints = false, ни активация constraints.&lt;/p&gt;

&lt;h3 id=&#34;используя-cartography-стороннее-по&#34;&gt;Используя Cartography(стороннее ПО)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;override func viewDidLoad() {
    super.viewDidLoad()
    
    let newView = UIView()
    newView.backgroundColor = UIColor.redColor()
    view.addSubview(newView)
    
    constrain(newView, view) { (newView, view) -&amp;gt; () in
        newView.centerX == view.centerX
        newView.centerY == view.centerY
        newView.width == 100
        newView.height == 100
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Данная библиотека использует декларативный стиль программирования, т.е она описывает каков объект, а не как его отображать.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S&lt;/strong&gt; Представленный код работает для swift 2.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>